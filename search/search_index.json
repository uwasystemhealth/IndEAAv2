{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IndEAA Technical Documentation","text":"<p>This will contain the technical documentation used for IndEAA. For now, there wont'be any confidential information here.</p> <p>It will probably contain the following: - structure of the codebase - VPS setup / infrastructure - different components to running the application</p>"},{"location":"developer/","title":"Developer Documentation","text":""},{"location":"developer/#execution","title":"Execution","text":"<p>Make sure you have docker installed.</p> <p>To start the application.</p> <ol> <li>Copy <code>docker/indeaa-local.env</code> to <code>.env</code> (in the root folder)</li> <li>run <code>docker-compose up</code></li> </ol> <p>This command should setup the containers (it will take sometime if this is the first time you ran that command). Then you can start development.</p> Google Authentication? <p>You will need to create an OAuth 2.0 client in Google Cloud and provide the details in the <code>.env</code> file. See Authentication for more details</p>"},{"location":"developer/authentication/","title":"Authentication","text":""},{"location":"developer/authentication/#frontend","title":"Frontend","text":""},{"location":"developer/authentication/#login","title":"Login","text":""},{"location":"developer/authentication/#reauthenticate-with-localstorage","title":"Reauthenticate with LocalStorage","text":"<p>The <code>token</code> is stored in the localStorage. The user is reauthenticated everytime the application is loaded. The expiry of the token can be seen in <code>base.py</code>.</p> When does the token expire? <p>Let's say the expiry of the token lasts for 1 day. Because of the reauthentication everytime the application is loaded, as long as someone logs in before the token expires, the user will always get a fresh token.</p>"},{"location":"developer/authentication/#authentication-context","title":"Authentication Context","text":"<p>The authentication uses <code>context</code> to pass the user information across the different component. See <code>components/context.tsx</code>. Refer to React Context documentation for more information.</p>"},{"location":"developer/authentication/#authentication-components","title":"Authentication Components","text":"<p>The authentication feature has created multiple different component used in various places.</p>"},{"location":"developer/authentication/#authenticationguard","title":"<code>AuthenticationGuard</code>","text":"<p>This component is used to check if the user is authenticated. If not, it redirects to the login page.</p> Usage <p>This component is just a wrapper around your component. <pre><code>&lt;AuthenticationGuard&gt;\n    &lt;YourComponent /&gt;\n&lt;/AuthenticationGuard&gt;\n</code></pre></p>"},{"location":"developer/authentication/#permissionguard","title":"<code>PermissionGuard</code>","text":"<p>This component is an extention of <code>AuthenticationGuard</code> and is used to check if the user has the permission to access the page. TODO</p>"},{"location":"developer/authentication/#backend","title":"Backend","text":"<p>The backend authentication is handled by dj-rest-auth with a plugin called djangorestframework-simplejwt (plugin reference link).</p> <p>This is currently served at <code>api/v1/authentication</code> (see <code>backend/config/urls.py::api_patterns</code>)</p>"},{"location":"developer/authentication/#google-oauth-setup","title":"Google OAuth setup","text":"<p>Sign up for Google Cloud and create a new project from the console.</p> <p>On the side menu under \"APIs and services\" click \"Credentials\"</p> <p>At the top of the page click \"Create credentials\" and select \"OAuth client ID\"</p> <p>Now fill out the form with these values:</p> Field Value Application Type Web Application Authorized Javascript origins <code>&lt;YOURDOMAIN&gt;:8000</code> Authorized redirect URIs <code>&lt;YOURDOMAIN&gt;:8000/api/v1/authentication/google/login/callback/</code> <p>Replace <code>&lt;YOURDOMAIN&gt;</code> with your real domain, for example in testing it could be <code>http://localhost</code></p> <p>Now that you have created the OAuth client, copy the Client ID and Client secret from the side. Paste these into your <code>.env</code> file with keys <code>GOOGLE_CLIENT_ID</code> and <code>GOOGLE_SECRET</code></p> <p>While in development you will need to manually add users until Google approves your application. Click \"OAuth consent screen\" on the left. You can add up to 100 test users, which are the emails of Google accounts. </p>"},{"location":"developer/authentication/#oauth-process","title":"OAuth process","text":"<p>The user presses a button on the login page</p> <p>The user is directed to the endpoint <code>/api/v1/authentication/google/login/redirect/</code>, which crafts a Google login page URL based on the application's Google client ID.</p> <p><code>https://accounts.google.com/o/oauth2/v2/auth?redirect_uri=DOMAIN/api/v1/authentication/google/login/callback/&amp;prompt=consent&amp;response_type=code&amp;client_id={GOOGLE_CLIENT_ID}&amp;scope={scope}{params}</code></p> <p>The user is redirected to the URL, then signs into their Google account on Google's login page.</p> <p>Google redirects the user to the <code>callback_url</code> which is an backend API endpoint on our server: <code>/api/v1/authentication/google/login/callback/</code>.</p> <p>Google <code>GET</code>s this callback endpoint with data including a code. The callback endpoint redirects the user to a login page on the frontend. The code is then <code>POST</code>ed to <code>/api/v1/authentication/google/</code>. The backend then logs the user into their account on our server.</p>"},{"location":"developer/authentication/#links","title":"Links","text":"<ul> <li>Google OAuth docs</li> </ul>"},{"location":"developer/automated_testing_and_ci/","title":"Automated Testing and CI","text":"<p>Automated testing help us to ensure that our code is working as expected. Continuous Integration (CI) is a process that helps us to ensure that our code is working as expected by running our automated testing on events such as pull requests and code commits.</p>"},{"location":"developer/automated_testing_and_ci/#automated-testing","title":"Automated Testing","text":""},{"location":"developer/automated_testing_and_ci/#backend-pytest-unit-testing","title":"Backend: Pytest (Unit Testing)","text":"<p>We use pytest for our tests with pytest-django as a plugin.</p>"},{"location":"developer/automated_testing_and_ci/#running-test","title":"Running Test","text":"<ol> <li>Go inside the container <code>docker exec -it indeaa_django bash</code> or <code>docker-compose exec -it backend bash</code></li> <li>Run pytest <code>py.test</code> or <code>pytest</code>.</li> </ol> Manual Testing Debugging <p>You can add <code>breakpoint()</code> in your code and attach a terminal to the instance <code>docker attach indeaa_django</code>.</p> Running only a specific test <p>If you only want to run a specific test, use the below syntax <pre><code>py.test course_evaluations/ # Runs all test within the folder\npy.test course_evaluations/test_crud.py # Runs the test in the file\npy.test course_evaluations/test_crud.py::test_list_view_course_evaluation # Run the specific function you want\n</code></pre></p>"},{"location":"developer/automated_testing_and_ci/#pytest-fixture-conftestpy","title":"Pytest Fixture <code>conftest.py</code>","text":"<p>You will notice that the test will use <code>conftest.py</code>. The syntax is a little weird at first, the fixture becomes parameters in tests that needs it.</p> Test that uses a conftest <pre><code>def test_list_view_course_evaluation(api_client_with_credentials_return_user, make_course_evaluation):\n    api_client, user = api_client_with_credentials_return_user()\n    course_evaluation_1 = make_course_evaluation(coordinators=[user])\n    course_evaluation_2 = make_course_evaluation(coordinators=[user])\n    ...\n</code></pre> <p><code>api_client_with_credentials_return_user</code> and <code>make_course_evaluation</code> are function that can bhe seen in <code>conftest.py</code>. This is accessible because of the command called <code>@pytest.fixture</code>. </p> <p>Also notice function such as <code>make_course_evaluation</code>. It has an interesting structure where it does a <code>yield _make_course_evaluation</code>. We are essentially creating a wrapper function that allows us to bind the teardown with that function.</p>"},{"location":"developer/automated_testing_and_ci/#why-not-just-use-the-default-django-tests","title":"Why not just use the default Django Tests?","text":"<p>The pytest ecosystem is bigger. Harder to get used to at first, but it is quite worth it because you can do cool examples like parametrised tests (checkout this link) that are more readable and maintainable.</p>"},{"location":"developer/automated_testing_and_ci/#frontend-cypress-e2e-testing","title":"Frontend: Cypress (E2E Testing)","text":"<p>We use Cypress for E2E testing.</p>"},{"location":"developer/automated_testing_and_ci/#running-the-test","title":"Running the test.","text":"<p>There are two ways to run the test. Firstly navigate to the <code>frontend</code> folder:</p> <ol> <li>Run tests via the the Cypress IDE: <code>yarn cypress:open</code></li> <li>Run tests via the CLI: <code>yarn cypress:run</code></li> </ol> <p>For the specific commands, see the <code>package.json</code> script section.</p>"},{"location":"developer/automated_testing_and_ci/#pro-tip-cypress-studio","title":"Pro Tip: Cypress Studio","text":"<p>You can write tests by recording your action such as typing and clicking. Read more about Cypress studio here. Please modularise and clean the test after using the recorder to make it easier to maintain.</p>"},{"location":"developer/automated_testing_and_ci/#continuous-integration-github-actions","title":"Continuous Integration - Github Actions","text":"<p>We use github actions for our continuous integration. All the code being used for github actions can be seen in <code>.github/workflows/ci.yml</code>. This is the Continuous integration that runs for every commit on a pull request.</p> <p>We run a couple of things as part of our CI:</p> <ul> <li>Automated Testing eg <code>pytest_py3</code>, <code>integration-test-docker</code></li> <li>Automated Linting and Formatting eg <code>frontend-check</code> and <code>backend-check</code></li> </ul>"},{"location":"developer/backup/","title":"Backup","text":"<p>See <code>create-backup.sh</code> for the technicalities of the backup system. The gist is: we copy and compress the current volume mount for the database container.</p>"},{"location":"developer/backup/#cron-job","title":"Cron Job","text":"<p>We run a cron job once every month. More details about this, consult the VPS Documentation of the UWA System Health Lab.</p>"},{"location":"developer/course_evaluation/","title":"Course Evaluation","text":""},{"location":"developer/frontend_specific_documentation/","title":"Frontend Documentation","text":"<p>This contains the technical documentation for the frontend.</p>"},{"location":"developer/frontend_specific_documentation/#main-libraries-to-be-aware-of-in-frontend-development","title":"Main Libraries to be aware of in Frontend Development","text":"<p>The following libraries are to be aware of as it is extensively used in the frontend development:</p> <ul> <li>ReactJS</li> <li>NextJS: a library that handle SSR, and a more opinionated version of React that creates a lot of tooling</li> </ul>"},{"location":"developer/frontend_specific_documentation/#routing","title":"Routing","text":"<ul> <li>NextJS Routing: NextJS handling</li> </ul>"},{"location":"developer/frontend_specific_documentation/#state-management","title":"State Management","text":"<ul> <li>React Context (built-in to React) that allows passing data without having a component tree</li> </ul> Authentication <p>To be added, an Authentication Provider will be created to handle the authentication of the user.</p>"},{"location":"developer/frontend_specific_documentation/#component-system-and-design","title":"Component System and Design","text":"<ul> <li>Material UI v5: React library that is inline with Google Material Design</li> </ul> SSR with Material UI <p>Note, while NextJS is a good framework, it also introduces as some extra issues that we might need to be aware of:</p> <ul> <li>React Hydration Error</li> <li>MUI Server-side Rendering</li> </ul>"},{"location":"developer/frontend_specific_documentation/#api-integration","title":"API Integration","text":"<ul> <li>Axios: used for making HTTP requests to the backend</li> <li>React-SWR (Stale While Revalidate): uses Axios to make HTTP requests to the backend and caches the response in a concise way by abstracting the usual hooks and state management</li> </ul>"},{"location":"developer/frontend_specific_documentation/#form-handling","title":"Form Handling","text":"<ul> <li>Formik: library to handle usual form states</li> <li>Yup: library to handle usual form validation</li> </ul> Example of Using Material UI, Formik and Yup together <p>Most often you will like to use Material UI to create a good looking form input, while using formik to handle state management and Yup with form validation. Refer to documentation for example</p>"},{"location":"developer/frontend_specific_documentation/#developer-workflow-and-settings","title":"Developer Workflow and Settings","text":""},{"location":"developer/frontend_specific_documentation/#vscode","title":"Vscode","text":"<p>If you're using vscode, add the following configuration in <code>.vscode/settings.json</code>:</p> <pre><code>    \"[javascript]\": {\n\"editor.formatOnSave\": true,\n\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n},\n\"typescript.tsdk\": \"frontend/node_modules/typescript/lib\"\n</code></pre>"},{"location":"developer/frontend_specific_documentation/#typescript","title":"TypeScript","text":"<p>Initial typescript conversion has left a lot of .ts/.tsx files with warnings and errors that were suppressed using the <code>@ts-ignore</code> directive. This was mainly due to the fact the Material Dashboard was written in JavaScript and was not ported to TypeScript or no types or interfaces were provided during the initial setup process. This must be solved as soon as possible to avoid further issues and to gain from the benefits of TypeScript.</p>"},{"location":"developer/project_structure/","title":"Project Structure","text":""},{"location":"developer/project_structure/#github","title":"<code>.github</code>","text":"<p>These contains the relevant files related to github:</p> <ul> <li>github action automation scripts (CI scripts)</li> <li>issue templates</li> <li>pull request templates</li> </ul>"},{"location":"developer/project_structure/#docker","title":"<code>docker</code>","text":"<p>These files contains the recipes to build the docker containers for various parts of the web app.</p> <p>This folder also contains the environment variables that are loaded by the containers.</p>"},{"location":"developer/project_structure/#backend","title":"<code>backend</code>","text":"<p>These files contains anything related to the backend or the API. The main tech is Django with Django Rest Framework.</p> <p>The main files and folders (that you will need to know very well) are: - <code>commands</code>: Contains custom Django commands - <code>config</code>: This contains the main Django configurations for the application - <code>static</code>: This contains the static files that can be used for Django Templating engine (eg. Email and Frontend files served through Nginx as part of the backend interface) - <code>templates</code>: This contains the templates to be used for Django Templating engine - <code>utils</code>: These contains helper functions that are used in the application - <code>pyproject.toml</code>: Contains the dependencies of the project - <code>manage.py</code>: Main entrypoint for Django CLI commands - <code>conftest.py</code>: Pytest setup special file</p>"},{"location":"developer/project_structure/#frontend","title":"<code>frontend</code>","text":"<p>These files contains anything related to the frontend. The main tech is React (NextJS)</p> <p>The main files and folders (that you will need to know very well) are:</p> <ul> <li><code>cypress</code>: anything related to integration tests of Cypress will be here</li> <li><code>cypress.config.ts</code>: the configuration file for Cypress</li> <li><code>components</code>: React components</li> <li><code>pages</code>: Page Components of NextJS</li> <li><code>package.json</code>: Contains the dependencies of the project</li> <li><code>utils</code>: These contains helper functions that are used in the application</li> </ul>"},{"location":"developer/project_structure/#docs","title":"<code>docs</code>","text":"<p>This contains the files related to spinning up Mkdocs.</p>"},{"location":"developer/telemetry_and_observability/","title":"Telemetry and Observability","text":"<p>Telemetry and Observability helps us developers to understand how our services are used and to improve our services.</p>"},{"location":"developer/telemetry_and_observability/#tools-used-in-indeaa","title":"Tools used in IndEAA","text":""},{"location":"developer/telemetry_and_observability/#hotjar-frontend","title":"HotJar (Frontend)","text":"<p>See hotjar. This tool enables us to see how the user interacts. This is qualitative data on the interaction of the user.</p> <p>In terms of pricing, we don't expect a huge load, so we just stick to \"free\" pricing. Anything that drops out is not much of our concern.</p>"},{"location":"developer/telemetry_and_observability/#sentry-frontend-backend","title":"Sentry (Frontend + Backend)","text":"<p>Sentry is a tool that allows us developers to receive alerts whenever our app crashes (eg. throwing an exception). This shows us information such as where the crash occurred, the stack trace, environment, payload, as well as some meta information that can give us a full picture as to why certain errors are triggered or make us aware.</p> <p>See our sentry organisation to see the errors.</p> <p>???+ important \"Important files and configuration in Sentry:     The configuration for building frontend is in <code>frontend/next.config.js</code>. Note that in <code>dryRun</code>, we can configure to not build Sentry as part of the bundle in development mode.</p> <pre><code>Here are more configuration files with various purposes:\n- `sentry.properties` - selects the project for the command line of Sentry\n- `sentry.client.config.js` - for client-side rendering\n- `sentry.server.config.js` - for server-side rendering\n\nNote: For frontend, the source maps are uploaded as part of the build to Sentry. Hence, you need a `SENTRY_AUTH_TOKEN` to perform build. This can be obtained in Sentry API tokens.\n</code></pre>"},{"location":"legal/privacy/","title":"Information we collect","text":""},{"location":"legal/privacy/#email-login","title":"Email Login","text":"<p>When you log in to our site using an email address and password, we store your email address which is used for account management only</p>"},{"location":"legal/privacy/#google-oauth","title":"Google OAuth","text":"<p>When you log in to our site using Google login, we store your Google account username, Google account id, first name, last name, and email address which are used for account management only.</p>"},{"location":"legal/privacy/#hotjar","title":"Hotjar","text":"<p>We use Hotjar in order to better understand our users\u2019 needs and to optimize this service and experience. Hotjar is a technology service that helps us better understand our users\u2019 experience (e.g. how much time they spend on which pages, which links they choose to click, what users do and don\u2019t like, etc.) and this enables us to build and maintain our service with user feedback. Hotjar uses cookies and other technologies to collect data on our users\u2019 behavior and their devices. This includes a device's IP address (processed during your session and stored in a de-identified form), device screen size, device type (unique device identifiers), browser information, geographic location (country only), and the preferred language used to display our website. Hotjar stores this information on our behalf in a pseudonymized user profile. Hotjar is contractually forbidden to sell any of the data collected on our behalf.</p> <p>For further details, please see the \u2018about Hotjar\u2019 section of Hotjar\u2019s support site</p>"},{"location":"legal/privacy/#how-we-store-information","title":"How We Store Information","text":"<p>We do not keep information that we no longer need for the purpose it was collected, unless the law requires us to do so. It is either destroyed or de-identified as required under the Archives Act 1983. Only authorised personnel can access personal information stored by us. Security features protect it from unauthorised access. We store information in different ways, including:</p> <ul> <li>our document and records management systems</li> <li>cloud storage</li> </ul>"}]}