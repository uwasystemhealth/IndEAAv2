{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IndEAA Technical Documentation \u00b6 This will contain the technical documentation used for IndEAA. For now, there wont'be any confidential information here. It will probably contain the following: - structure of the codebase - VPS setup / infrastructure - different components to running the application","title":"Overview"},{"location":"#indeaa-technical-documentation","text":"This will contain the technical documentation used for IndEAA. For now, there wont'be any confidential information here. It will probably contain the following: - structure of the codebase - VPS setup / infrastructure - different components to running the application","title":"IndEAA Technical Documentation"},{"location":"developer/","text":"Developer Documentation \u00b6 Execution \u00b6 Make sure you have docker installed. To start the application. Copy docker/indeaa-local.env to .env (in the root folder) run docker-compose up This command should setup the containers (it will take sometime if this is the first time you ran that command). Then you can start development. Google Authentication? You will need to create an OAuth 2.0 client in Google Cloud and provide the details in the .env file. See Authentication for more details","title":"Overview"},{"location":"developer/#developer-documentation","text":"","title":"Developer Documentation"},{"location":"developer/#execution","text":"Make sure you have docker installed. To start the application. Copy docker/indeaa-local.env to .env (in the root folder) run docker-compose up This command should setup the containers (it will take sometime if this is the first time you ran that command). Then you can start development. Google Authentication? You will need to create an OAuth 2.0 client in Google Cloud and provide the details in the .env file. See Authentication for more details","title":"Execution"},{"location":"developer/authentication/","text":"Authentication \u00b6 Frontend \u00b6 Login \u00b6 Reauthenticate with LocalStorage \u00b6 The token is stored in the localStorage. The user is reauthenticated everytime the application is loaded. The expiry of the token can be seen in base.py . When does the token expire? Let's say the expiry of the token lasts for 1 day. Because of the reauthentication everytime the application is loaded, as long as someone logs in before the token expires, the user will always get a fresh token. Authentication Context \u00b6 The authentication uses context to pass the user information across the different component. See components/context.tsx . Refer to React Context documentation for more information. Authentication Components \u00b6 The authentication feature has created multiple different component used in various places. AuthenticationGuard \u00b6 This component is used to check if the user is authenticated. If not, it redirects to the login page. Usage This component is just a wrapper around your component. 1 2 3 <AuthenticationGuard> <YourComponent /> </AuthenticationGuard> PermissionGuard \u00b6 This component is an extention of AuthenticationGuard and is used to check if the user has the permission to access the page. TODO Backend \u00b6 The backend authentication is handled by dj-rest-auth with a plugin called d jangorestframework-simplejwt (plugin reference link ). This is currently served at api/v1/authentication (see backend/config/urls.py::api_patterns ) Google OAuth setup \u00b6 Sign up for Google Cloud and create a new project from the console . On the side menu under \"APIs and services\" click \"Credentials\" At the top of the page click \"Create credentials\" and select \"OAuth client ID\" Now fill out the form with these values: Field Value Application Type Web Application Authorized Javascript origins <YOURDOMAIN>:8000 Authorized redirect URIs <YOURDOMAIN>:8000/api/v1/authentication/google/login/callback/ Replace <YOURDOMAIN> with your real domain, for example in testing it could be http://localhost Now that you have created the OAuth client, copy the Client ID and Client secret from the side. Paste these into your .env file with keys GOOGLE_CLIENT_ID and GOOGLE_SECRET While in development you will need to manually add users until Google approves your application. Click \"OAuth consent screen\" on the left. You can add up to 100 test users, which are the emails of Google accounts. OAuth process \u00b6 The user presses a button on the login page The user is directed to the endpoint /api/v1/authentication/google/login/redirect/ , which crafts a Google login page URL based on the application's Google client ID. https://accounts.google.com/o/oauth2/v2/auth?redirect_uri=DOMAIN/api/v1/authentication/google/login/callback/&prompt=consent&response_type=code&client_id={GOOGLE_CLIENT_ID}&scope={scope}{params} The user is redirected to the URL, then signs into their Google account on Google's login page. Google redirects the user to the callback_url which is an backend API endpoint on our server: /api/v1/authentication/google/login/callback/ . Google GET s this callback endpoint with data including a code. The callback endpoint redirects the user to a login page on the frontend. The code is then POST ed to /api/v1/authentication/google/ . The backend then logs the user into their account on our server. Links \u00b6 Google OAuth docs","title":"Authentication"},{"location":"developer/authentication/#authentication","text":"","title":"Authentication"},{"location":"developer/authentication/#frontend","text":"","title":"Frontend"},{"location":"developer/authentication/#login","text":"","title":"Login"},{"location":"developer/authentication/#reauthenticate-with-localstorage","text":"The token is stored in the localStorage. The user is reauthenticated everytime the application is loaded. The expiry of the token can be seen in base.py . When does the token expire? Let's say the expiry of the token lasts for 1 day. Because of the reauthentication everytime the application is loaded, as long as someone logs in before the token expires, the user will always get a fresh token.","title":"Reauthenticate with LocalStorage"},{"location":"developer/authentication/#authentication-context","text":"The authentication uses context to pass the user information across the different component. See components/context.tsx . Refer to React Context documentation for more information.","title":"Authentication Context"},{"location":"developer/authentication/#authentication-components","text":"The authentication feature has created multiple different component used in various places.","title":"Authentication Components"},{"location":"developer/authentication/#authenticationguard","text":"This component is used to check if the user is authenticated. If not, it redirects to the login page. Usage This component is just a wrapper around your component. 1 2 3 <AuthenticationGuard> <YourComponent /> </AuthenticationGuard>","title":"AuthenticationGuard"},{"location":"developer/authentication/#permissionguard","text":"This component is an extention of AuthenticationGuard and is used to check if the user has the permission to access the page. TODO","title":"PermissionGuard"},{"location":"developer/authentication/#backend","text":"The backend authentication is handled by dj-rest-auth with a plugin called d jangorestframework-simplejwt (plugin reference link ). This is currently served at api/v1/authentication (see backend/config/urls.py::api_patterns )","title":"Backend"},{"location":"developer/authentication/#google-oauth-setup","text":"Sign up for Google Cloud and create a new project from the console . On the side menu under \"APIs and services\" click \"Credentials\" At the top of the page click \"Create credentials\" and select \"OAuth client ID\" Now fill out the form with these values: Field Value Application Type Web Application Authorized Javascript origins <YOURDOMAIN>:8000 Authorized redirect URIs <YOURDOMAIN>:8000/api/v1/authentication/google/login/callback/ Replace <YOURDOMAIN> with your real domain, for example in testing it could be http://localhost Now that you have created the OAuth client, copy the Client ID and Client secret from the side. Paste these into your .env file with keys GOOGLE_CLIENT_ID and GOOGLE_SECRET While in development you will need to manually add users until Google approves your application. Click \"OAuth consent screen\" on the left. You can add up to 100 test users, which are the emails of Google accounts.","title":"Google OAuth setup"},{"location":"developer/authentication/#oauth-process","text":"The user presses a button on the login page The user is directed to the endpoint /api/v1/authentication/google/login/redirect/ , which crafts a Google login page URL based on the application's Google client ID. https://accounts.google.com/o/oauth2/v2/auth?redirect_uri=DOMAIN/api/v1/authentication/google/login/callback/&prompt=consent&response_type=code&client_id={GOOGLE_CLIENT_ID}&scope={scope}{params} The user is redirected to the URL, then signs into their Google account on Google's login page. Google redirects the user to the callback_url which is an backend API endpoint on our server: /api/v1/authentication/google/login/callback/ . Google GET s this callback endpoint with data including a code. The callback endpoint redirects the user to a login page on the frontend. The code is then POST ed to /api/v1/authentication/google/ . The backend then logs the user into their account on our server.","title":"OAuth process"},{"location":"developer/authentication/#links","text":"Google OAuth docs","title":"Links"},{"location":"developer/course_evaluation/","text":"Course Evaluation \u00b6","title":"Course Evaluation"},{"location":"developer/course_evaluation/#course-evaluation","text":"","title":"Course Evaluation"},{"location":"developer/frontend_specific_documentation/","text":"Frontend Documentation \u00b6 This contains the technical documentation for the frontend. Main Libraries to be aware of in Frontend Development \u00b6 The following libraries are to be aware of as it is extensively used in the frontend development: ReactJS NextJS : a library that handle SSR, and a more opinionated version of React that creates a lot of tooling Routing \u00b6 NextJS Routing : NextJS handling State Management \u00b6 React Context (built-in to React) that allows passing data without having a component tree Authentication To be added, an Authentication Provider will be created to handle the authentication of the user. Component System and Design \u00b6 Material UI v5 : React library that is inline with Google Material Design API Integration \u00b6 Axios : used for making HTTP requests to the backend React-SWR (Stale While Revalidate): uses Axios to make HTTP requests to the backend and caches the response in a concise way by abstracting the usual hooks and state management Form Handling \u00b6 Formik : library to handle usual form states Yup : library to handle usual form validation Example of Using Material UI, Formik and Yup together Most often you will like to use Material UI to create a good looking form input, while using formik to handle state management and Yup with form validation. Refer to documentation for example Developer Workflow and Settings \u00b6 Vscode \u00b6 If you're using vscode, add the following configuration in .vscode/settings.json : 1 2 3 4 5 \"[javascript]\" : { \"editor.formatOnSave\" : true , \"editor.defaultFormatter\" : \"esbenp.prettier-vscode\" }, \"typescript.tsdk\" : \"frontend/node_modules/typescript/lib\" TypeScript \u00b6 Initial typescript conversion has left a lot of .ts/ .tsx files with warnings and errors that were suppressed using the @ts-ignore directive. This was mainly due to the fact the Material Dashboard was written in JavaScript and was not ported to TypeScript or no types or interfaces were provided during the initial setup process. This must be solved as soon as possible to avoid further issues and to gain from the benefits of TypeScript.","title":"Frontend Specific Documentation"},{"location":"developer/frontend_specific_documentation/#frontend-documentation","text":"This contains the technical documentation for the frontend.","title":"Frontend Documentation"},{"location":"developer/frontend_specific_documentation/#main-libraries-to-be-aware-of-in-frontend-development","text":"The following libraries are to be aware of as it is extensively used in the frontend development: ReactJS NextJS : a library that handle SSR, and a more opinionated version of React that creates a lot of tooling","title":"Main Libraries to be aware of in Frontend Development"},{"location":"developer/frontend_specific_documentation/#routing","text":"NextJS Routing : NextJS handling","title":"Routing"},{"location":"developer/frontend_specific_documentation/#state-management","text":"React Context (built-in to React) that allows passing data without having a component tree Authentication To be added, an Authentication Provider will be created to handle the authentication of the user.","title":"State Management"},{"location":"developer/frontend_specific_documentation/#component-system-and-design","text":"Material UI v5 : React library that is inline with Google Material Design","title":"Component System and Design"},{"location":"developer/frontend_specific_documentation/#api-integration","text":"Axios : used for making HTTP requests to the backend React-SWR (Stale While Revalidate): uses Axios to make HTTP requests to the backend and caches the response in a concise way by abstracting the usual hooks and state management","title":"API Integration"},{"location":"developer/frontend_specific_documentation/#form-handling","text":"Formik : library to handle usual form states Yup : library to handle usual form validation Example of Using Material UI, Formik and Yup together Most often you will like to use Material UI to create a good looking form input, while using formik to handle state management and Yup with form validation. Refer to documentation for example","title":"Form Handling"},{"location":"developer/frontend_specific_documentation/#developer-workflow-and-settings","text":"","title":"Developer Workflow and Settings"},{"location":"developer/frontend_specific_documentation/#vscode","text":"If you're using vscode, add the following configuration in .vscode/settings.json : 1 2 3 4 5 \"[javascript]\" : { \"editor.formatOnSave\" : true , \"editor.defaultFormatter\" : \"esbenp.prettier-vscode\" }, \"typescript.tsdk\" : \"frontend/node_modules/typescript/lib\"","title":"Vscode"},{"location":"developer/frontend_specific_documentation/#typescript","text":"Initial typescript conversion has left a lot of .ts/ .tsx files with warnings and errors that were suppressed using the @ts-ignore directive. This was mainly due to the fact the Material Dashboard was written in JavaScript and was not ported to TypeScript or no types or interfaces were provided during the initial setup process. This must be solved as soon as possible to avoid further issues and to gain from the benefits of TypeScript.","title":"TypeScript"},{"location":"developer/project_structure/","text":"Project Structure \u00b6 .github \u00b6 These contains the relevant files related to github: github action automation scripts (CI scripts) issue templates pull request templates docker \u00b6 These files contains the recipes to build the docker containers for various parts of the web app. This folder also contains the environment variables that are loaded by the containers. backend \u00b6 These files contains anything related to the backend or the API. The main tech is Django with Django Rest Framework . The main files and folders (that you will need to know very well) are: - commands : Contains custom Django commands - config : This contains the main Django configurations for the application - static : This contains the static files that can be used for Django Templating engine (eg. Email and Frontend files served through Nginx as part of the backend interface) - templates : This contains the templates to be used for Django Templating engine - utils : These contains helper functions that are used in the application - pyproject.toml : Contains the dependencies of the project - manage.py : Main entrypoint for Django CLI commands - conftest.py : Pytest setup special file frontend \u00b6 These files contains anything related to the frontend. The main tech is React ( NextJS ) The main files and folders (that you will need to know very well) are: cypress : anything related to integration tests of Cypress will be here cypress.config.ts : the configuration file for Cypress components : React components pages : Page Components of NextJS package.json : Contains the dependencies of the project utils : These contains helper functions that are used in the application docs \u00b6 This contains the files related to spinning up Mkdocs .","title":"Project Structure"},{"location":"developer/project_structure/#project-structure","text":"","title":"Project Structure"},{"location":"developer/project_structure/#github","text":"These contains the relevant files related to github: github action automation scripts (CI scripts) issue templates pull request templates","title":".github"},{"location":"developer/project_structure/#docker","text":"These files contains the recipes to build the docker containers for various parts of the web app. This folder also contains the environment variables that are loaded by the containers.","title":"docker"},{"location":"developer/project_structure/#backend","text":"These files contains anything related to the backend or the API. The main tech is Django with Django Rest Framework . The main files and folders (that you will need to know very well) are: - commands : Contains custom Django commands - config : This contains the main Django configurations for the application - static : This contains the static files that can be used for Django Templating engine (eg. Email and Frontend files served through Nginx as part of the backend interface) - templates : This contains the templates to be used for Django Templating engine - utils : These contains helper functions that are used in the application - pyproject.toml : Contains the dependencies of the project - manage.py : Main entrypoint for Django CLI commands - conftest.py : Pytest setup special file","title":"backend"},{"location":"developer/project_structure/#frontend","text":"These files contains anything related to the frontend. The main tech is React ( NextJS ) The main files and folders (that you will need to know very well) are: cypress : anything related to integration tests of Cypress will be here cypress.config.ts : the configuration file for Cypress components : React components pages : Page Components of NextJS package.json : Contains the dependencies of the project utils : These contains helper functions that are used in the application","title":"frontend"},{"location":"developer/project_structure/#docs","text":"This contains the files related to spinning up Mkdocs .","title":"docs"}]}